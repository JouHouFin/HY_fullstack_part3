{"version":3,"sources":["components/utils.js","services/communications.js","components/person.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","type","onClick","handleClick","text","filteredString","handleFilterChange","value","onChange","placeholder","newName","handleNameChange","newNumber","handleNumberChange","addContact","message","msg","msgStyle","padding","border","backgroundColor","display","className","style","baseUrl","axios","get","then","response","data","newPersonObject","post","personId","delete","modifiedPerson","put","Person","person","deleteContact","name","number","utils","id","persons","filteringString","length","filteredList","filter","toLowerCase","includes","sort","a","b","map","key","App","useState","setPersons","setNewName","setNewNumber","setFilteringString","notificationMessage","setNotificationMessage","makePerson","resetFields","setNotificationMessageDelay","setTimeout","useEffect","personComms","initialPersons","event","target","preventDefault","some","personToModifyId","find","window","confirm","modifiedPersonObject","catch","error","initialNewPerson","concat","personName","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.a4fc2ee5.chunk.js","sourcesContent":["import React from 'react'\n\nconst Button = props => {\n  return (\n    <button type={props.type} onClick={props.handleClick}>{props.text}</button>\n  )\n}\n\nconst FilterInput = ({filteredString, handleFilterChange}) => {\n  return (\n    <input value={filteredString} onChange={handleFilterChange} placeholder=\"filter by name\"/>\n  )\n}\n\nconst PersonForm = ({ newName, handleNameChange, newNumber, handleNumberChange, addContact }) => {\n  return (\n    <form>\n      <div>Name: <input value={newName} onChange={handleNameChange} /></div>\n      <div>Number: <input value={newNumber} onChange={handleNumberChange} /></div>\n      <div><Button handleClick={addContact} text={'add'} type=\"submit\" /></div>\n    </form>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message.msg === null) {\n    return null\n  }\n\n  let msgStyle = null\n\n  if (message.type === 'error') {\n    msgStyle = {padding: '4px', border: '1px solid black', backgroundColor: 'red',display:'inline-block'}\n  }\n  if (message.type === 'success') {\n    msgStyle = {padding: '4px', border: '1px solid black', backgroundColor: 'green',display:'inline-block'}\n  }\n\n  return (\n    <div className=\"error\" style={msgStyle}>\n      {message.msg}\n    </div>\n  )\n}\n\nexport default {Button, FilterInput, PersonForm, Notification}","import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getPersons = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst createPerson = newPersonObject => {\n  const request = axios.post(baseUrl, newPersonObject)\n  return request.then(response => response.data)\n}\n\nconst deletePerson = personId => {\n  const request = axios.delete(`${baseUrl}/${personId}`)\n  return request.then(response => response.data)\n}\n\nconst updatePerson = (personId, modifiedPerson) => {\n  const request = axios.put(`${baseUrl}/${personId}`, modifiedPerson)\n  return request.then(response => response.data)\n}\n\nexport default {getPersons, createPerson, deletePerson, updatePerson}","import React from 'react';\nimport utils from './utils'\n\nconst Person = ({ person, deleteContact }) => {\n  return (\n    <tr>\n      <td>{person.name}</td>\n      <td>{person.number}</td>\n      <td><utils.Button handleClick={() => deleteContact(person.id, person.name)} type={\"submit\"} text={\"delete\"} /></td>\n    </tr>\n  )\n}\n\nconst PersonList = ({ persons, filteringString, deleteContact }) => {\n  if (persons.length === 0) {\n    return ( <h4>No numbers yet. Add some using the form above.</h4>)\n  }\n  const filteredList = persons.filter(person => person.name.toLowerCase().includes(filteringString.toLowerCase()))\n  filteredList.sort((a, b) => (a.name.toLowerCase() > b.name.toLowerCase()) ? true : false)\n\n  return (\n    <table>\n      <tbody>\n        <tr><th>Name</th><th>Phone number</th></tr>\n        {filteredList.map(person => <Person key={person.id} person={person} deleteContact={deleteContact}/>)}\n      </tbody>\n    </table>\n  )\n}\n\nexport default {Person, PersonList}","import React, { useState, useEffect } from 'react'\nimport utils from './components/utils'\nimport personComms from './services/communications'\nimport personComps from './components/person'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filteringString, setFilteringString] = useState('')\n  const [notificationMessage, setNotificationMessage] = useState({msg: null, type: null})\n\n  const makePerson = () => { return { name: newName, number: newNumber } }\n  const resetFields = () => { setNewName(''); setNewNumber('') } \n  const handleNameChange = event => { setNewName(event.target.value) }\n  const handleNumberChange = event => { setNewNumber(event.target.value) }\n  const handleFilterChange = event => { setFilteringString(event.target.value) }\n  const setNotificationMessageDelay = () => {\n    setTimeout(() => {          \n      setNotificationMessage({msg: null, type: null})}, 5000)\n  }\n\n  useEffect(() => {\n    personComms.getPersons()\n    .then(initialPersons => {\n      setPersons(initialPersons)\n    })\n  }, [])\n\n  const addContact = event => {\n    event.preventDefault()\n    if (newName === '') {\n      setNotificationMessage({msg: 'Name cannot be empty.', type: 'error'})\n      setNotificationMessageDelay()\n\n    } else if (newNumber === '') {\n      setNotificationMessage({msg: 'Number cannot be empty.', type: 'error'})\n      setNotificationMessageDelay()\n\n    } else if (persons.some(person => person.name === newName)) {\n      const personToModifyId = persons.find(person => person.name === newName).id\n      const result = window.confirm(`${newName} is already added to phonebook. Change the number?`)\n\n      if (result) {\n      const modifiedPersonObject = makePerson()\n      personComms.updatePerson(personToModifyId, modifiedPersonObject)\n      .then(modifiedPerson => {\n        setPersons(persons.map(person => person.id !== personToModifyId ? person : modifiedPerson))\n        resetFields()\n        setNotificationMessage({msg: `${newName} modified.`, type: 'success'})\n        setNotificationMessageDelay()\n      })\n      .catch(error => {\n        setNotificationMessage({msg: `The contact was already deleted from the server. Refreshing the contact list.`, type: 'error'})\n        personComms.getPersons()\n        .then(initialPersons => {\n          setPersons(initialPersons)\n        })        \n        setNotificationMessageDelay()\n      })\n      }\n\n    } else {\n      const newPersonObject = makePerson()\n      personComms.createPerson(newPersonObject)\n      .then(initialNewPerson => {\n        setPersons(persons.concat(initialNewPerson))\n        resetFields()\n        setNotificationMessage({msg: `${newName} added.`, type: 'success'})\n        setNotificationMessageDelay()\n      })\n\n    }\n  }\n\n  const deleteContact = (personId, personName) => {\n    const result = window.confirm(`Delete ${personName} from phonebook?`);\n    if (result) {\n      personComms.deletePerson(personId)\n      .then(() => {\n        setPersons(persons.filter(person => personId !== person.id))\n        setNotificationMessage({msg: `${personName} deleted.`, type: 'success'})\n        setNotificationMessageDelay()\n      })\n    }\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <h2>Add a new number</h2>\n      <utils.PersonForm newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumberChange={handleNumberChange} addContact={addContact} />\n      <utils.Notification message={notificationMessage} />\n      <h3>Numbers <utils.FilterInput filteringString={filteringString} handleFilterChange={handleFilterChange} /></h3>\n      <personComps.PersonList persons={persons} filteringString={filteringString} deleteContact={deleteContact}/>\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}